# Warning: this Makefile is only meant to be invoked from the main
# Makefile.

#     This Makefile allows to rebuild the filesystem image of Netkit, a network
#     emulation environment based on the integration of several existing pieces
#     of software.  For more information: http://www.netkit.org/
#
#     Copyright (C) 2015  Massimo Rimondini (rimondini@ing.uniroma3.it)
#     Computer Networks Research Group, Roma Tre University
# 
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, version 3 of the License.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.

###########################################################
#                   Variable assignments
###########################################################

# Variable: FILESYSTEM_BUILD_DIR
# Specifies the name of the directory where work files for building the
# filesystem image will be kept. It should always be an absolute path.
# Example:
# FILESYSTEM_BUILD_DIR:=$(CURDIR)/fs-build
FILESYSTEM_BUILD_DIR:=$(CURDIR)/fs-build-$(TARGET_ARCH)

# Variable: FILESYSTEM_BASEPACKAGES_ARCHIVE
# Temporary compressed file where base .deb packages for building the filesystem
# image will be stored
FILESYSTEM_BASEPACKAGES_ARCHIVE:=base-deb-packages-$(TARGET_ARCH)

# Variable: DEBIAN_MIRROR
# Base URL of the Debian mirror to be used when retrieving packages, without
# final '/'. Example:
# DEBIAN_MIRROR?=http://ftp.it.debian.org/debian
DEBIAN_MIRROR?=http://ftp.it.debian.org/debian

# Variable: HEADER_LIBRARY_DEBS_URL
# Space-separated list of URLs pointing to .deb packages that contain header
# files and libraries required to successfully compile the kernel. They will
# *not* be actually installed, but just decompressed in order to retrieve the
# required files. Different .deb packages may be required depending on the
# target architecture Netkit is being built for. Example:
# HEADER_LIBRARY_DEBS_URL=$(DEBIAN_MIRROR)/debian/pool/main/v/vde2/libvdeplug-dev_2.3.2+r586-2_amd64.deb
HEADER_LIBRARY_DEBS_URL:=$(DEBIAN_MIRROR)/pool/main/v/vde2/libvdeplug-dev_2.3.2+r586-2+b1_$(TARGET_ARCH_DEBIAN).deb $(DEBIAN_MIRROR)/pool/main/libp/libpcap/libpcap0.8-dev_1.6.2-2_$(TARGET_ARCH_DEBIAN).deb

# Variable: DEBIAN_RELEASE
# Specifies the name of the Debian release that should be installed in the
# filesystem image. Available names can be found at
# https://www.debian.org/releases/. Example:
# DEBIAN_RELEASE?=sid
DEBIAN_RELEASE?=sid

# Variable: FILESYSTEM_IMAGE_SIZE
# Specifies the amount of available space inside the filesystem image (since
# it is created as a sparse file, this does not correspond to actual physical
# disk space consumption). Suffixes such as K, M, and G, are supported. Example:
# FILESYSTEM_IMAGE_SIZE?=10G
FILESYSTEM_IMAGE_SIZE?=10G

# The following assignment determines the filesystem type used inside the
# Netkit filesystem image
FILESYSTEM_TYPE:=ext4

# The following URL points to a compiled UML kernel that is used to write
# inside the filesystem image without root privileges (and without the need
# for host-side loopback device support). The UML kernel architecture must
# match the host's.
ifeq ($(shell arch),i386)
BIN_UML_KERNEL_URL:=http://uml.devloop.org.uk/kernels/kernel32-4.3.5.xz
else
BIN_UML_KERNEL_URL:=http://uml.devloop.org.uk/kernels/kernel64-4.3.5.xz
endif

MKFS=$(call find_command,mkfs.$(FILESYSTEM_TYPE))
DEBOOTSTRAP=$(call find_command,debootstrap)
FAKEROOT=$(call find_command,fakeroot)



FILESYSTEM_TWEAKS_DIR:=fs-tweaks
# Sample value for FILESYSTEM_TWEAKS_DIR: fs-tweaks

FILESYSTEM_PACKAGES_DEBCONF:=netkit-fs-debconf
# Sample value for FILESYSTEM_PACKAGES_DEBCONF: netkit-fs-debconf

FILESYSTEM_PACKAGES_LIST_FROM_VM:=/tmp/netkit-package-list
# Sample value for FILESYSTEM_PACKAGES_LIST_FROM_VM: /tmp/netkit-package-list

FILESYSTEM_TARGET_DIR:=$(NETKIT_HOME)/fs
# Sample value for FILESYSTEM_TARGET_DIR: netkit/fs

FILESYSTEM_TARGET_FILE_NAME:=netkit-fs-$(DEBIAN_RELEASE)-$(TARGET_ARCH)
# Sample value for FILESYSTEM_TARGET_FILE_NAME: netkit-fs-sid-x86_64

FILESYSTEM_MOUNT_DIR:=$(FILESYSTEM_BUILD_DIR)/temp-fs-mount
# Sample value for FILESYSTEM_MOUNT_DIR: fs-build-x86_64/temp-fs-mount

BIN_UML_KERNEL:=uml-kernel
# Sample value for BIN_UML_KERNEL: uml-kernel

UML_INIT_STUB:=uml-init-stub
# Sample value for UML_INIT_STUB: uml-init-stub



###########################################################
#           Build targets for external packages
###########################################################

EXTERNAL_PACKAGES=openvswitch pox

EXTERNAL_PACKAGES_MAKEFILES=$(foreach package,$(EXTERNAL_PACKAGES),Makefile.$(package))
EXTERNAL_PACKAGES_TARGETS=$(foreach package,$(EXTERNAL_PACKAGES),.$(package)-compiled-$(TARGET_ARCH))
EXTERNAL_PACKAGES_INSTALL_TARGETS=$(foreach package,$(EXTERNAL_PACKAGES),$(package)-install)
EXTERNAL_PACKAGES_CLEAN_TARGETS=$(foreach package,$(EXTERNAL_PACKAGES),clean-$(package))

include $(EXTERNAL_PACKAGES_MAKEFILES)

###########################################################
#                Filesystem-related targets
###########################################################

# Isolate the steps in the build procedure that require root privileges to be
# executed
ifeq ($(shell whoami),root)
filesystem: $(FILESYSTEM_MOUNT_DIR)
	$(call display_message,filesystem,"You can now continue the build as a standard user: just reinvoke the Makefile on the same filesystem target\(s\) specifying STAGE=2.")
else
ifeq ($(STAGE),2)
filesystem: $(FILESYSTEM_TARGET_DIR)/$(FILESYSTEM_TARGET_FILE_NAME)
else
filesystem: $(FILESYSTEM_MOUNT_DIR)
endif
endif

$(FILESYSTEM_TARGET_DIR)/$(FILESYSTEM_TARGET_FILE_NAME): .fs-setup-complete-$(TARGET_ARCH)
	$(call display_message,filesystem,"Sparsifying filesystem image and moving it to its default location")
	mkdir -p $(FILESYSTEM_TARGET_DIR)
	cp --sparse=always -f $(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img $(FILESYSTEM_TARGET_DIR)/$(FILESYSTEM_TARGET_FILE_NAME)
	rm -f $(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img
	$(call display_message,filesystem,"Saving list of packages")
	mv $(FILESYSTEM_PACKAGES_LIST_FROM_VM) $(FILESYSTEM_TARGET_DIR)/$(FILESYSTEM_TARGET_FILE_NAME)-packages.lst
	{ echo "=== SOFTWARE PIECES COMPILED FROM SOURCE CODE ==="; for i in $(EXTERNAL_PACKAGES); do echo $$i; done; } >> $(FILESYSTEM_TARGET_DIR)/$(FILESYSTEM_TARGET_FILE_NAME)-packages.lst

.fs-setup-complete-$(TARGET_ARCH): $(TOOLS_ARCH_DIR)/slirp $(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img
	$(call display_message,filesystem,"Continuing filesystem setup inside virtual machine")
# Must take care to invoke slirp from a sane path, because UML converts spaces in the slirp
# path to underscores
# (see http://ptgmedia.pearsoncmg.com/images/9780131865051/downloads/013865056_Dike_book.pdf)
	$(NETKIT_HOME)/kernel/netkit-kernel-$(TARGET_ARCH) umid=netkit-setup-vm mem=1G ubd0=$(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img con=null con0=fd:0,fd:1 eth0=slirp,,$(TOOLS_ARCH_DIR)/slirp quiet systemd.show_status=1
	[ ! -f /tmp/.netkit-setup-running ]
	touch .fs-setup-complete-$(TARGET_ARCH)

# The following target performs all the actions that require
# the filesystem image to be mounted. In order to prevent this from
# requiring root privileges and loopback device support on the host,
# a compiled UML kernel is used for this task.
$(FILESYSTEM_MOUNT_DIR): $(FILESYSTEM_BUILD_DIR)/$(BIN_UML_KERNEL) $(TOOLS_ARCH_DIR)/slirp $(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img $(FILESYSTEM_BUILD_DIR)/$(FILESYSTEM_BASEPACKAGES_ARCHIVE).tgz $(EXTERNAL_PACKAGES_TARGETS)
	$(call display_message,filesystem,"Installing base packages in the filesystem image")
	mkdir -p $(FILESYSTEM_MOUNT_DIR)
# root=/ is required in order to let libmount understand correctly the 'device'
# used to mount the root filesystem (otherwise, an error is raised every time
# mount/umount are invoked).
	$(BIN_UML_KERNEL) mem=512M rootfstype=hostfs eth0=slirp,,$(TOOLS_ARCH_DIR)/slirp quiet root=/ init=$(UML_INIT_STUB) TARGETARCH=$(TARGET_ARCH) WORKDIR=$(PWD)
# At this point the filesystem mount directory may have an older
# modification time than the filesystem image's.
	touch $(FILESYSTEM_MOUNT_DIR)


# The following target is supposed to be invoked only from inside a UML kernel
# image, since it involves operations that require root privileges. As such, it
# must have no prerequisites.
.fs-privileged-tasks-done-$(TARGET_ARCH):
	mount -o loop $(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img $(FILESYSTEM_MOUNT_DIR) || mountpoint $(FILESYSTEM_MOUNT_DIR)
	$(FAKEROOT) $(DEBOOTSTRAP) --no-resolve-deps --unpack-tarball=$(FILESYSTEM_BUILD_DIR)/$(FILESYSTEM_BASEPACKAGES_ARCHIVE).tgz --arch=$(TARGET_ARCH_DEBIAN) --include=debconf-utils $(DEBIAN_RELEASE) $(FILESYSTEM_MOUNT_DIR) $(DEBIAN_MIRROR)
	$(call display_message,filesystem,"Performing additional tasks inside the filesystem image")
# Prepare a list of APT sources based on the official list of primary Debian mirrors
	mkdir -p $(FILESYSTEM_MOUNT_DIR)/etc/apt
	wget --no-verbose -O - "http://ftp.it.debian.org/debian/README.mirrors.txt" | sed -n '/Primary/,/Secondary/p' | awk '/i386/ {split(substr($$0,match($$0,/ftp/)),a); print "# deb http://" a[1] a[2] " $(DEBIAN_RELEASE) main contrib non-free"}' | sed '/ftp\.it/ s/^# //' > $(FILESYSTEM_MOUNT_DIR)/etc/apt/sources.list
	cp -rd $(FILESYSTEM_TWEAKS_DIR)/* $(FILESYSTEM_MOUNT_DIR)
	cp $(FILESYSTEM_PACKAGES_DEBCONF) $(FILESYSTEM_MOUNT_DIR)
	ln -fs /etc/systemd/netkit/netkit-setup.service $(FILESYSTEM_MOUNT_DIR)/etc/systemd/system/multi-user.target.wants
	$(call display_message,filesystem,"Installing additional software pieces inside the filesystem image")
	for ext_target in $(EXTERNAL_PACKAGES_INSTALL_TARGETS); do $(MAKE) $$ext_target; done
	umount $(FILESYSTEM_MOUNT_DIR)
	touch .fs-privileged-tasks-done-$(TARGET_ARCH)


$(FILESYSTEM_BUILD_DIR)/$(BIN_UML_KERNEL):
	$(call display_message,filesystem,"Downloading binary UML image to be used for package installation")
	mkdir -p $(FILESYSTEM_BUILD_DIR)
	wget --progress=dot:mega --inet4-only -O - $(BIN_UML_KERNEL_URL) | unxz -c >$(FILESYSTEM_BUILD_DIR)/$(BIN_UML_KERNEL)
	chmod +x $(FILESYSTEM_BUILD_DIR)/$(BIN_UML_KERNEL)

$(FILESYSTEM_BUILD_DIR)/$(FILESYSTEM_BASEPACKAGES_ARCHIVE).tgz:
	$(call display_message,filesystem,"Downloading packages for minimal Debian installation")
	mkdir -p $(FILESYSTEM_BUILD_DIR)
# Simply downloading .deb packages should not really require root privileges, so
# we use fakeroot here
	$(FAKEROOT) $(DEBOOTSTRAP) --download-only --arch=$(TARGET_ARCH_DEBIAN) --make-tarball=$(FILESYSTEM_BUILD_DIR)/$(FILESYSTEM_BASEPACKAGES_ARCHIVE)-$(TIMESTAMP).tgz --include=debconf-utils $(DEBIAN_RELEASE) $(FILESYSTEM_MOUNT_DIR) $(DEBIAN_MIRROR)
	rm -fr $(FILESYSTEM_MOUNT_DIR)
	ln -fs $(FILESYSTEM_BASEPACKAGES_ARCHIVE)-$(TIMESTAMP).tgz $(FILESYSTEM_BUILD_DIR)/$(FILESYSTEM_BASEPACKAGES_ARCHIVE).tgz

$(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img:
	$(call display_message,filesystem,"Creating empty filesystem")
	mkdir -p $(FILESYSTEM_BUILD_DIR)
	dd if=/dev/zero of=$(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img bs=1 count=0 seek=$(FILESYSTEM_IMAGE_SIZE)
	$(MKFS) -L "Netkit FS" -t $(FILESYSTEM_TYPE) -F $(FILESYSTEM_BUILD_DIR)/temp-fs-$(TARGET_ARCH).img



clean-filesystem: $(EXTERNAL_PACKAGES_CLEAN_TARGETS)
	rm -fr $(FILESYSTEM_BUILD_DIR) .fs-setup-complete-$(TARGET_ARCH) .fs-privileged-tasks-done-$(TARGET_ARCH) $(EXTERNAL_PACKAGES_TARGETS)

