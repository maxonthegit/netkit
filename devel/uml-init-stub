#!/bin/bash

#     This script is invoked by the Netkit filesystem Makefile in order to
#     perform operations inside the filesystem image. Netkit is a network
#     emulation environment based on the integration of several existing pieces
#     of software.  For more information: http://www.netkit.org/
#
#     Copyright (C) 2016  Massimo Rimondini (rimondini@ing.uniroma3.it)
#     Computer Networks Research Group, Roma Tre University
# 
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, version 3 of the License.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Exit if any of the commands below fails (note that this will cause a
# harmless panic in the UML kernel, because it implies killing init).
set -e

# Extra assignments on the UML kernel command line are
# passed as environment variables to this script.
# Expected variables (for stage 1) are:
# TARGETARCH: target architecture for the filesystem image (i386 or x86_64)
# WORKDIR: the directory where the filesystem build is taking place

# The following command is required only if the "rw" argument is not
# passed on as UML kernel command line argument.
#mount -o remount,rw none /
mount -t proc none /proc
mount -t sysfs none /sys
mount -t tmpfs none /run
# The option to automatically mount devtmpfs may be compiled in the kernel.
# Note that, even if the host-side /dev is a mountpoint, the UML kernel
# only sees its own mountpoints, therefore the following test works
# correctly.
mountpoint /dev || mount -t devtmpfs none /dev

case $(basename $0) in
	uml-init-stub)
		# Replace resolv.conf in well-known (and writable) locations
		for DIR in /run/{NetworkManager,resolvconf}; do
			mkdir ${DIR}
			echo "nameserver 8.8.8.8" > ${DIR}/resolv.conf
		done

		# Enable network (required by debootstrap to fetch repository information)
		echo Setting up network...
		ip addr add 10.0.2.15/8 dev eth0
		ip link set eth0 up
		ip route add default dev eth0

		cd ${WORKDIR}

		make do-privileged-tasks TARGET_ARCH=${TARGETARCH}
	;;
	uml-init-stub-stage2)
		/debootstrap/debootstrap --second-stage || { echo "Failed debootstrap stage 2. Log follows:"; cat /debootstrap/debootstrap.log; }
	;;
esac

/sbin/poweroff -f

